{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "CoreOS cluster running Docker Swarm",

  "Mappings" : {
    "CIDRs" : {
      "us-east-1" : {
        "VPC" : "10.200.0.0/16",
        "Subnets" : [
          "10.200.0.0/24",
          "10.200.1.0/24",
          "10.200.2.0/24"
        ]
      },
      "us-west-1" : {
        "VPC" : "10.201.0.0/16",
        "Subnets" : [
          "10.201.0.0/24",
          "10.201.1.0/24",
          "10.201.2.0/24"
        ]
      },
      "us-west-2" : {
        "VPC" : "10.202.0.0/16",
        "Subnets" : [
          "10.202.0.0/24",
          "10.202.1.0/24",
          "10.202.2.0/24"
        ]
      }
    },

    "Regions" : {
      "us-east-1" : { "AMI" : "ami-37bdc15d" },
      "us-west-1" : { "AMI" : "ami-27553a47" },
      "us-west-2" : { "AMI" : "ami-00ebfc61" }
    }
  },

  "Parameters" : {
    "InstanceType" : {
      "Type" : "String",
      "Description" : "EC2 HVM instance type (t2.micro, m3.medium, etc).",
      "ConstraintDescription" : "Must be a valid EC2 HVM instance type.",
      "Default" : "t2.micro",
      "AllowedValues" : [
        "t2.micro",
        "t2.small",
        "t2.medium",
        "t2.large",
        "m4.large",
        "m4.xlarge",
        "m4.2xlarge",
        "m4.4xlarge",
        "m4.10xlarge",
        "m3.medium",
        "m3.large",
        "m3.xlarge",
        "m3.2xlarge",
        "c4.large",
        "c4.xlarge",
        "c4.2xlarge",
        "c4.4xlarge",
        "c4.8xlarge",
        "c3.large",
        "c3.xlarge",
        "c3.2xlarge",
        "c3.4xlarge",
        "c3.8xlarge",
        "r3.large",
        "r3.xlarge",
        "r3.2xlarge",
        "r3.4xlarge",
        "r3.8xlarge",
        "i2.xlarge",
        "i2.2xlarge",
        "i2.4xlarge",
        "i2.8xlarge"
      ]
    },

    "ClusterSize" : {
      "Type" : "Number",
      "Default" : "3",
      "MinValue" : "3",
      "MaxValue" : "12",
      "Description" : "Number of nodes in the CoreOS cluster"
    },

    "DiscoveryURL" : {
      "Type" : "String",
      "Description" : "A unique etcd cluster discovery URL. Grab a new token from https://discovery.etcd.io/new?size=3",
      "Default" : ""
    },

    "AdvertisedIPAddress" : {
      "Type" : "String",
      "Description" : "Use 'private' if the etcd cluster is in one region; 'public' if >1 region/cloud provider",
      "AllowedValues" : [
        "private",
        "public"
      ],
      "Default" : "private"
    },

    "AllowSSHFrom" : {
      "Type" : "String",
      "Description" : "The net block (CIDR) from which SSH and Docker are available on the master node",
      "Default" : "0.0.0.0/0"
    },

    "KeyName" : {
      "Type" : "AWS::EC2::KeyPair::KeyName",
      "Description" : "The name of an EC2 Key Pair to allow SSH access on the master node",
      "Default" : "ops.pem"
    },

    "VPCAvailabilityZones" : {
      "Type" : "CommaDelimitedList",
      "Description" : "Comma-delimited list of three VPC availability zones in which nodes are created.",
      "Default" : "us-west-2a,us-west-2b,us-west-2c"
    }
  },

  "Resources" : {

    "VPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Fn::FindInMap" : [ "CIDRs", { "Ref" : "AWS::Region" }, "VPC" ] },
        "EnableDnsSupport" : "true",
        "EnableDnsHostnames" : "true",
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "VPC"] ] } }
        ]
      }
    },

    "PublicSubnetAZ1" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {
          "Fn::Select" : [ "0", { "Fn::FindInMap" : [ "CIDRs", { "Ref" : "AWS::Region" }, "Subnets" ] } ]
        },
        "AvailabilityZone" : {
          "Fn::Select" : [ "0", { "Ref" : "VPCAvailabilityZones" } ]
        },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet", "1" ]] }}
        ]
      }
    },

    "PublicSubnetAZ2" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {
          "Fn::Select" : [ "1", { "Fn::FindInMap" : [ "CIDRs", { "Ref" : "AWS::Region" }, "Subnets" ] } ]
        },
        "AvailabilityZone" : {
          "Fn::Select" : [ "1", { "Ref" : "VPCAvailabilityZones" } ]
        },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet", "2" ]] }}
        ]
      }
    },

    "PublicSubnetAZ3" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "CidrBlock" : {
          "Fn::Select" : [ "2", { "Fn::FindInMap" : [ "CIDRs", { "Ref" : "AWS::Region" }, "Subnets" ] } ]
        },
        "AvailabilityZone" : {
          "Fn::Select" : [ "2", { "Ref" : "VPCAvailabilityZones" } ]
        },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Subnet", "3" ]] }}
        ]
      }
    },

    "InternetGateway" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "IGW"] ] } }
        ]
      }
    },

    "AttachGateway" : {
      "Type" : "AWS::EC2::VPCGatewayAttachment",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC" },
        "InternetGatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "RouteViaIGW" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "VPC"}
      }
    },

    "PublicRouteViaIGW" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "RouteViaIGW" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "InternetGateway" }
      }
    },

    "PublicSubnet1RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAZ1" },
        "RouteTableId" : { "Ref" : "RouteViaIGW" }
      }
    },

    "PublicSubnet2RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAZ2" },
        "RouteTableId" : { "Ref" : "RouteViaIGW" }
      }
    },

    "PublicSubnet3RouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "PublicSubnetAZ3" },
        "RouteTableId" : { "Ref" : "RouteViaIGW" }
      }
    },

    "MasterCoreOSSecurityGroup" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Master CoreOS SecurityGroup",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22",   "ToPort" : "22",   "CidrIp" : { "Ref" : "AllowSSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "4243", "ToPort" : "4243", "CidrIp" : { "Ref" : "AllowSSHFrom" } },
          { "IpProtocol" : "tcp", "FromPort" : "2375", "ToPort" : "2375", "CidrIp" : { "Ref" : "AllowSSHFrom" } },

          { "IpProtocol" : "tcp", "FromPort" : "80", "ToPort" :  "80",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" },

          { "IpProtocol" : "tcp", "FromPort" : "4243", "ToPort" : "4243", "SourceSecurityGroupId" : {
            "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
          }},

          { "IpProtocol" : "tcp", "FromPort" : "4001", "ToPort" : "4001", "SourceSecurityGroupId" : {
            "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
          }},

          { "IpProtocol" : "tcp", "FromPort" : "2379", "ToPort" : "2379", "SourceSecurityGroupId" : {
            "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
          }},

          { "IpProtocol" : "tcp", "FromPort" : "2380", "ToPort" : "2380", "SourceSecurityGroupId" : {
            "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
          }}
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Master-SG" ] ] } }
        ]
      }
    },

    "NodeCoreOSSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Node CoreOS SecurityGroup",
        "VpcId" : { "Ref" : "VPC" },
        "SecurityGroupIngress" : [
          { "IpProtocol" : "tcp", "FromPort" : "22",  "ToPort" : "22",  "CidrIp" : { "Ref" : "AllowSSHFrom" } },

          { "IpProtocol" : "tcp", "FromPort" : "80",  "ToPort" : "80",  "CidrIp" : "0.0.0.0/0" },
          { "IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0" }
        ],
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node-SG" ] ] } }
        ]
      }
    },

    "NodeIngress4243" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4243",
        "ToPort" : "4243",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "NodeIngress4001" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4001",
        "ToPort" : "4001",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "NodeIngress2379" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2379",
        "ToPort" : "2379",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "NodeIngress2380" : {
      "DependsOn" : "NodeCoreOSSecurityGroup",
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2380",
        "ToPort" : "2380",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterIngress4243" : {
      "DependsOn" : [ "MasterCoreOSSecurityGroup", "NodeCoreOSSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4243",
        "ToPort" : "4243",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "MasterCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterIngress4001" : {
      "DependsOn" : [ "MasterCoreOSSecurityGroup", "NodeCoreOSSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "4001",
        "ToPort" : "4001",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "MasterCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterIngress2379" : {
      "DependsOn" : [ "MasterCoreOSSecurityGroup", "NodeCoreOSSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2379",
        "ToPort" : "2379",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "MasterCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterIngress2380" : {
      "DependsOn" : [ "MasterCoreOSSecurityGroup", "NodeCoreOSSecurityGroup" ],
      "Type" : "AWS::EC2::SecurityGroupIngress",
      "Properties" : {
        "GroupId" : {
          "Fn::GetAtt" : [ "NodeCoreOSSecurityGroup", "GroupId" ]
        },
        "IpProtocol" : "tcp",
        "FromPort" : "2380",
        "ToPort" : "2380",
        "SourceSecurityGroupId" : {
          "Fn::GetAtt" : [ "MasterCoreOSSecurityGroup", "GroupId" ]
        }
      }
    },

    "MasterCoreOSInstance" : {
      "DependsOn" : "InternetGateway",
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "AvailabilityZone" : { "Fn::Select" : [ "0", { "Ref" : "VPCAvailabilityZones" } ] },
        "ImageId" : { "Fn::FindInMap" : [ "Regions", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "InstanceType"},
        "KeyName" : { "Ref" : "KeyName"},
        "NetworkInterfaces": [ {
          "AssociatePublicIpAddress": "true",
          "DeleteOnTermination" : "true",
          "DeviceIndex": "0",
          "SubnetId": { "Ref" : "PublicSubnetAZ1" },
          "GroupSet" : [ { "Ref" : "MasterCoreOSSecurityGroup" } ]
        } ],
        "UserData" : { "Fn::Base64" :
          { "Fn::Join" : [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  etcd2:\n",
            "    discovery: ", { "Ref" : "DiscoveryURL" }, "\n",
            "    advertise-client-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2379\n",
            "    initial-advertise-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2380\n",
            "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n",
            "    listen-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2380\n",
            "  units:\n",
            "    - name: docker-tcp.socket\n",
            "      command: start\n",
            "      enable: true\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Docker Socket for the API\n\n",
            "        [Socket]\n",
            "        ListenStream=4243\n",
            "        BindIPv6Only=both\n",
            "        Service=docker.service\n\n",
            "        [Install]\n",
            "        WantedBy=sockets.target\n",
            "    - name: etcd2.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n",
            "    - name: docker-swarm.service\n",
            "      command: start\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Swarm service\n",
            "        After=docker.service\n\n",
            "        [Service]\n",
            "        Restart=no\n",
            "        ExecStart=/usr/bin/docker run --name docker-swarm -d -p 2375:2375 swarm manage etcd://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2379/swarm\n"
            ] ]
          }
        },
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Master" ] ] } }
        ]
      }
    },

    "CoreOSServerAsg" : {
      "DependsOn" : "MasterCoreOSInstance",
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "AvailabilityZones" :
          [
            { "Fn::Select" : [ "0", { "Ref" : "VPCAvailabilityZones" } ] },
            { "Fn::Select" : [ "1", { "Ref" : "VPCAvailabilityZones" } ] },
            { "Fn::Select" : [ "2", { "Ref" : "VPCAvailabilityZones" } ] }
          ],
        "VPCZoneIdentifier" : [
          { "Fn::Join" : [",", [
            { "Ref" : "PublicSubnetAZ1" },
            { "Ref" : "PublicSubnetAZ2" },
            { "Ref" : "PublicSubnetAZ3" }
          ]] }
        ],
        "LaunchConfigurationName" : { "Ref" : "CoreOSServerLaunchConfig" },
        "MinSize" : "3",
        "MaxSize" : "12",
        "DesiredCapacity" : { "Ref" : "ClusterSize"},
        "Tags": [
          { "Key" : "Name", "Value" : { "Fn::Join": [ "-", [ { "Ref": "AWS::StackName"}, "Node" ] ] }, "PropagateAtLaunch" : "true" }
        ]
      }
    },

    "CoreOSServerLaunchConfig" : {
      "DependsOn" : [ "InternetGateway", "MasterCoreOSInstance" ],
      "Type" : "AWS::AutoScaling::LaunchConfiguration",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "Regions", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "InstanceType"},
        "AssociatePublicIpAddress" : true,
        "KeyName" : { "Ref" : "KeyName"},
        "SecurityGroups" : [ { "Ref" : "NodeCoreOSSecurityGroup"} ],
        "UserData" : { "Fn::Base64" :
          { "Fn::Join" : [ "", [
            "#cloud-config\n\n",
            "coreos:\n",
            "  etcd2:\n",
            "    discovery: ", { "Ref" : "DiscoveryURL" }, "\n",
            "    advertise-client-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2379\n",
            "    initial-advertise-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2380\n",
            "    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001\n",
            "    listen-peer-urls: http://$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:2380\n",
            "  units:\n",
            "    - name: docker-tcp.socket\n",
            "      command: start\n",
            "      enable: true\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Docker Socket for the API\n\n",
            "        [Socket]\n",
            "        ListenStream=4243\n",
            "        BindIPv6Only=both\n",
            "        Service=docker.service\n\n",
            "        [Install]\n",
            "        WantedBy=sockets.target\n",
            "    - name: etcd2.service\n",
            "      command: start\n",
            "    - name: fleet.service\n",
            "      command: start\n",
            "    - name: docker-swarm.service\n",
            "      command: start\n",
            "      content: |\n",
            "        [Unit]\n",
            "        Description=Swarm service\n",
            "        After=docker.service\n\n",
            "        [Service]\n",
            "        Restart=no\n",
            "        ExecStart=/usr/bin/docker run --name docker-swarm -d swarm join --addr=$", { "Ref" : "AdvertisedIPAddress" }, "_ipv4:4243 etcd://", { "Fn::GetAtt" : [ "MasterCoreOSInstance", "PrivateIp" ] }, ":2379/swarm\n"
            ] ]
          }
        }
      }
    }
  },

  "Outputs" : {
    "MasterDockerPS" : {
      "Description" : "Command to run `docker ps` on the Docker Swarm master node",
      "Value" : { "Fn::Join" : [ "", [ "docker -H tcp://", { "Fn::GetAtt" : [ "MasterCoreOSInstance", "PublicIp" ] }, ":2375 ps" ] ] }
    },
    "MasterPublicIP" : {
      "Description" : "Public IP for the Docker Swarm master node",
      "Value" : { "Fn::GetAtt" : [ "MasterCoreOSInstance", "PublicIp" ] }
    },
    "MasterPrivateIP" : {
      "Description" : "Private IP for the Docker Swarm master node",
      "Value" : { "Fn::GetAtt" : [ "MasterCoreOSInstance", "PrivateIp" ] }
    }
  }
}
